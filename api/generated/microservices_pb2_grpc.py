# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import microservices_pb2 as microservices__pb2


class MicroservicesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListFiles = channel.unary_unary(
            '/Microservices/ListFiles',
            request_serializer=microservices__pb2.ListRequest.SerializeToString,
            response_deserializer=microservices__pb2.FilesResponse.FromString,
        )
        self.SearchFiles = channel.unary_unary(
            '/Microservices/SearchFiles',
            request_serializer=microservices__pb2.SearchRequest.SerializeToString,
            response_deserializer=microservices__pb2.FilesResponse.FromString,
        )


class MicroservicesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MicroservicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ListFiles': grpc.unary_unary_rpc_method_handler(
            servicer.ListFiles,
            request_deserializer=microservices__pb2.ListRequest.FromString,
            response_serializer=microservices__pb2.FilesResponse.SerializeToString,
        ),
        'SearchFiles': grpc.unary_unary_rpc_method_handler(
            servicer.SearchFiles,
            request_deserializer=microservices__pb2.SearchRequest.FromString,
            response_serializer=microservices__pb2.FilesResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Microservices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class Microservices(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListFiles(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Microservices/ListFiles',
                                             microservices__pb2.ListRequest.SerializeToString,
                                             microservices__pb2.FilesResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchFiles(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Microservices/SearchFiles',
                                             microservices__pb2.SearchRequest.SerializeToString,
                                             microservices__pb2.FilesResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
